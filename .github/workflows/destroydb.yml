name: PR close preview cleanup

on:
  pull_request:
    types: [closed]

permissions:
  contents: read
  pull-requests: write

jobs:
  destroy_resources:
    name: Destroy Vercel Deployment and Turso Database
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared
      - name: Install Vercel
        run: pnpm install -g vercel@latest
      - name: Get Preview URL
        uses: dlip/get-vercel-deployment-action@v1.0.2
        id: get-vercel-deployment
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ secrets.VERCEL_WEB_PROJECT_ID }}
          github-branch: ${{ github.head_ref }}
          github-commit: ${{ github.event.pull_request.head.sha }}

      - name: Destroy Vercel Deployment
        working-directory: apps/web
        run: |
          vercel remove https://${{ steps.get-vercel-deployment.outputs.deployment-url }} --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_TEAM_ID }} --yes || true

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Delete All Turso Databases for the Pull Request
        run: |
          set -e

          # Define variables
          API_BASE_URL="https://api.turso.tech/v1/organizations/snide/databases"
          AUTH_HEADER="Authorization: Bearer ${{ secrets.TURSO_API_TOKEN }}"

          # Extract the PR number from GitHub Actions context
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PREFIX="pr-${PR_NUMBER}"

          # Fetch databases related to the PR using curl and parse with jq
          RESPONSE=$(curl -s -X GET -H "$AUTH_HEADER" "$API_BASE_URL")

          # Output a message indicating response was received
          echo "API response received."

          # Extract database names using jq
          DATABASES=$(echo "$RESPONSE" | jq -r '.databases[].name' | grep -F "^${PREFIX}")

          # Check if there are any databases to delete
          if [ -z "$(echo -n "$DATABASES")" ]; then
            echo "No databases found for prefix ${PREFIX}."
            exit 0
          fi

          echo "Databases found to be deleted:"
          echo "$DATABASES"

          # Set IFS to newline to handle database names safely
          IFS=$'\n'

          # Delete each database
          for DB_NAME in $DATABASES; do
            echo "Attempting to delete database: $DB_NAME"
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
              -H "$AUTH_HEADER" \
              "$API_BASE_URL/$DB_NAME")

            echo "HTTP_STATUS (deleting $DB_NAME): $HTTP_STATUS"

            if [ "$HTTP_STATUS" -ne 204 ]; then
              echo "Failed to delete database: $DB_NAME. HTTP Status: $HTTP_STATUS."
            else
              echo "Database $DB_NAME deleted successfully."
            fi
          done
