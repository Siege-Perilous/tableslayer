name: PR

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared
      - run: pnpm format-check

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared
      - run: pnpm lint -- --quiet

  tsc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared
      - run: pnpm tsc

  create_database:
    if: github.event.pull_request.draft == false
    name: 'Turso'
    runs-on: ubuntu-latest
    needs: [format-check, lint, tsc]
    outputs:
      turso_db_url: ${{ steps.set-db-url.outputs.turso_db_url }}
    steps:
      - name: Set New Database Name
        id: set-db-name
        run: |
          NEW_DB_NAME="pr-${{ github.event.pull_request.number }}"
          echo "NEW_DB_NAME=${NEW_DB_NAME}" >> $GITHUB_ENV

      - name: Check/Create Database and Set TURSO_APP_DB_URL
        id: set-db-url
        run: |
          set -e

          # Define variables
          API_BASE_URL="https://api.turso.tech/v1/organizations/snide/databases"
          DB_NAME="${{ env.NEW_DB_NAME }}"
          AUTH_HEADER="Authorization: Bearer ${{ secrets.TURSO_API_TOKEN }}"

          # Function to fetch database details
          fetch_database_details() {
            HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" -X GET \
              -H "$AUTH_HEADER" \
              "$API_BASE_URL/$DB_NAME")

            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1)
            RESPONSE=$(echo "$HTTP_RESPONSE" | sed '$d')

            echo "HTTP_STATUS: $HTTP_STATUS"
            echo "RESPONSE: $RESPONSE"

            if [ "$HTTP_STATUS" -eq 200 ]; then
              HOSTNAME=$(echo "$RESPONSE" | python3 -c 'import sys, json; data=json.load(sys.stdin)["database"]; print((data.get("Hostname") or data.get("hostname") or "null").strip())')
              HOSTNAME=$(echo "$HOSTNAME" | tr -d '\r\n')
              echo "Database exists. HOSTNAME: $HOSTNAME"
              DATABASE_EXISTS=true
            else
              DATABASE_EXISTS=false
            fi
          }

          # Function to retry fetching the database details until hostname is available
          retry_fetch_until_hostname() {
            MAX_RETRIES=5
            RETRY_DELAY=5  # seconds

            for ((i=1; i<=MAX_RETRIES; i++)); do
              fetch_database_details
              if [ "$DATABASE_EXISTS" = "true" ] && [ -n "$HOSTNAME" ] && [ "$HOSTNAME" != "null" ]; then
                echo "Hostname successfully fetched: $HOSTNAME"
                return 0
              fi
              echo "Hostname not yet available. Retrying in $RETRY_DELAY seconds... ($i/$MAX_RETRIES)"
              sleep $RETRY_DELAY
            done

            echo "Failed to fetch hostname after $MAX_RETRIES retries."
            exit 1
          }

          # Fetch existing database details
          fetch_database_details

          # Create the database if it doesn't exist
          if [ "$DATABASE_EXISTS" != "true" ]; then
            HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "$AUTH_HEADER" \
              -H "Content-Type: application/json" \
              -d '{"name": "'"$DB_NAME"'", "group": "default", "seed": {"type": "database", "name": "ts"} }' \
              "$API_BASE_URL")

            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1)
            RESPONSE=$(echo "$HTTP_RESPONSE" | sed '$d')

            echo "HTTP_STATUS: $HTTP_STATUS"
            echo "RESPONSE: $RESPONSE"

            if [ "$HTTP_STATUS" -eq 201 ] || [ "$HTTP_STATUS" -eq 200 ]; then
              echo "Database created successfully."
              retry_fetch_until_hostname  # Wait and retry fetching hostname if not available
            elif [ "$HTTP_STATUS" -eq 409 ]; then
              echo "Database already exists. Fetching details..."
              fetch_database_details
              if [ "$DATABASE_EXISTS" != "true" ]; then
                echo "Failed to fetch database details after 409 error."
                exit 1
              fi
            else
              echo "Failed to create database. HTTP Status: $HTTP_STATUS. Response: $RESPONSE"
              exit 1
            fi
          fi

          # Check if hostname was successfully retrieved
          if [ -z "$HOSTNAME" ] || [ "$HOSTNAME" = "null" ]; then
            echo "Hostname not found in response"
            exit 1
          fi

          # Set the output for the TURSO_APP_DB_URL
          TURSO_APP_DB_URL="libsql://${HOSTNAME}"
          echo "turso_db_url=$TURSO_APP_DB_URL" >> $GITHUB_OUTPUT
          echo "TURSO_APP_DB_URL=${TURSO_APP_DB_URL}" >> $GITHUB_ENV

  deploy:
    if: github.event.pull_request.draft == false
    name: Railway
    runs-on: ubuntu-latest
    needs: [create_database]
    env:
      TURSO_APP_DB_URL: ${{ needs.create_database.outputs.turso_db_url }}
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
    steps:
      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: fcinitial
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '[x]:eyAiYXBwIjogIndlYnNpdGUtcHJldmlldyIgfQ=='
      - name: Find or Create Initial PR Comment
        id: find-or-create-comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.fcinitial.outputs.comment-id }}
          edit-mode: replace
          body: |
            [x]:eyAiYXBwIjogIndlYnNpdGUtcHJldmlldyIgfQ==
            ### Railway Preview Deployments - In Progress üöÄ

            - Docs Deployment is in progress...
            - Web Deployment is in progress...
          create-when-empty: true
      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '[x]:eyAiYXBwIjogIndlYnNpdGUtcHJldmlldyIgfQ=='
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - uses: ./.github/shared
      - name: Install Railway
        run: pnpm install -g @railway/cli@latest
      - name: Create/Retrieve PR Environment
        run: |
          # Create an environment named pr-<PR_NUMBER> if it doesn't exist
          # Check if environment exists
          RAILWAY_TOKEN=${{ secrets.RAILWAY_WEB_PROJECT_ID }} railway link -p ${{ secrets.RAILWAY_WEB_PROJECT_ID }}
          ENV_NAME="pr-${{ github.event.pull_request.number }}"
          if ! railway environment list | grep -q "$ENV_NAME"; then
            railway environment create "$ENV_NAME"
          fi
          railway environment switch "$ENV_NAME"

      - name: Set environment variables
        run: |
          railway variables set TURSO_APP_DB_URL=${{ env.TURSO_APP_DB_URL }}
          railway variables set GITHUB_PR_NUMBER=${{ github.event.pull_request.number }}

      - name: Build and Deploy to Railway
        run: |
          railway up --detach --no-confirm

      - name: Wait for Deployment to be Ready
        # Simple polling logic:
        run: |
          set -e
          for i in {1..30}; do
            STATUS=$(railway status | grep "Domain:" || true)
            if [ -n "$STATUS" ]; then
              echo "$STATUS"
              break
            fi
            echo "Waiting for domain..."
            sleep 10
          done
          if [ -z "$STATUS" ]; then
            echo "Deployment not ready in time."
            exit 1
          fi
          DOMAIN=$(echo "$STATUS" | awk '{print $2}')
          echo "RAILWAY_PUBLIC_DOMAIN=$DOMAIN" >> $GITHUB_OUTPUT

      - name: Update PR Comment After Deployment
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            [x]:eyAiYXBwIjogInJhaWx3YXktcHJldmlldyIgfQ==
            ### Railway Preview Deployment - Completed ‚úÖ

            - Preview at [${{ steps.wait-for-deployment.outputs.RAILWAY_PUBLIC_DOMAIN }}](https://${{ steps.wait-for-deployment.outputs.RAILWAY_PUBLIC_DOMAIN }})

      - name: Update PR Comment After Failure
        if: failure()
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            [x]:eyAiYXBwIjogInJhaWx3YXktcHJldmlldyIgfQ==
            ### Railway Preview Deployment - Failed ‚ùå

            - Deployment failed. Please check the logs for more details.

  tests:
    if: github.event.pull_request.draft == false
    needs: [format-check, lint, tsc, create_database, deploy]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - app: docs
          - app: web
    name: ${{ matrix.app }} tests
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Retrieve Railway Domain
        # If you need the domain from the deploy job:
        run: |
          echo "Domain: ${{ needs.deploy.outputs.RAILWAY_PUBLIC_DOMAIN }}"

      - name: Install Playwright Browsers
        if: ${{ github.ref != 'refs/heads/main' }}
        run: pnpx playwright install --with-deps

      - name: Run Playwright Tests
        if: ${{ github.ref != 'refs/heads/main' }}
        working-directory: apps/${{ matrix.app }}
        env:
          BASE_URL: 'https://${{ needs.deploy.outputs.RAILWAY_PUBLIC_DOMAIN }}'
        run: |
          echo "BASE_URL is $BASE_URL"
          pnpm run test
