name: Deploy Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        default: 'main'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared
      - run: pnpm format-check

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared
      - run: pnpm lint -- --quiet

  tsc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared
      - run: pnpm tsc

  create_database:
    name: 'Create Database'
    runs-on: ubuntu-latest
    needs: [format-check, lint, tsc]
    outputs:
      turso_db_url: ${{ steps.set-db-url.outputs.turso_db_url }}
    steps:
      - name: Set New Database Name
        id: set-db-name
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref }}"
          CLEAN_BRANCH_NAME=$(echo "${BRANCH_NAME}" | tr -cd '[:alnum:]-')
          NEW_DB_NAME="preview-${CLEAN_BRANCH_NAME}"
          echo "NEW_DB_NAME=${NEW_DB_NAME}" >> $GITHUB_ENV

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Check/Create Database and Set TURSO_GS_PARENT_DB_URL
        id: set-db-url
        run: |
          set -e

          # Define variables
          API_BASE_URL="https://api.turso.tech/v1/organizations/snide/databases"
          DB_NAME="${{ env.NEW_DB_NAME }}"
          AUTH_HEADER="Authorization: Bearer ${{ secrets.TURSO_API_TOKEN }}"

          # Function to fetch database details
          fetch_database_details() {
            HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" -X GET \
              -H "$AUTH_HEADER" \
              "$API_BASE_URL/$DB_NAME")

            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1)
            RESPONSE=$(echo "$HTTP_RESPONSE" | sed '$d')

            if [ "$HTTP_STATUS" -eq 200 ]; then
              HOSTNAME=$(echo "$RESPONSE" | jq -r '.hostname')
              echo "Database exists. HOSTNAME: $HOSTNAME"
              DATABASE_EXISTS=true
            else
              DATABASE_EXISTS=false
            fi
          }

          # Fetch existing database details
          fetch_database_details

          # Create the database if it doesn't exist
          if [ "$DATABASE_EXISTS" != "true" ]; then
            HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "$AUTH_HEADER" \
              -H "Content-Type: application/json" \
              -d '{"name": "'"$DB_NAME"'", "group": "default", "seed": {"type": "database", "name": "ts"} }' \
              "$API_BASE_URL")

            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1)
            RESPONSE=$(echo "$HTTP_RESPONSE" | sed '$d')

            if [ "$HTTP_STATUS" -eq 201 ]; then
              HOSTNAME=$(echo "$RESPONSE" | jq -r '.hostname')
              echo "Database created successfully. HOSTNAME: $HOSTNAME"
            elif [ "$HTTP_STATUS" -eq 409 ]; then
              echo "Database already exists. Fetching details..."
              fetch_database_details
              if [ "$DATABASE_EXISTS" != "true" ]; then
                echo "Failed to fetch database details after 409 error."
                exit 1
              fi
              else
                echo "Failed to create database. HTTP Status: $HTTP_STATUS. Response: $RESPONSE"
                exit 1
              fi
            fi

            if [ -z "$HOSTNAME" ]; then
              echo "Hostname not found in response"
              exit 1
            fi

            # Set the output for the TURSO_GS_PARENT_DB_URL
            echo "turso_db_url=$HOSTNAME" >> $GITHUB_OUTPUT
            echo "HOSTNAME is $HOSTNAME"

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [create_database]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: ./.github/shared
      - name: Link Vercel Project - Web
        working-directory: apps/web
        run: |
          vercel link --token ${{ secrets.VERCEL_TOKEN }} --yes --scope ${{ secrets.VERCEL_TEAM_ID }}

      # Remove and Set Environment Variable for Web Project in Vercel with Git Branch Scope
      - name: Remove Environment Variable for Web Project in Vercel
        working-directory: apps/web
        run: |
          vercel env rm TURSO_GS_PARENT_DB_URL preview ${{ github.head_ref }} --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_TEAM_ID }} --yes || true

      # Set Environment Variable for Web Project in Vercel with Git Branch Scope
      - name: Set Environment Variable for Web Project in Vercel
        working-directory: apps/web
        run: |
          echo ${{ needs.create_database.outputs.turso_db_url }} | vercel env add TURSO_GS_PARENT_DB_URL preview ${{ github.head_ref }} --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_TEAM_ID }}

      # Verify the Environment Variable before Deployment
      - name: Verify TURSO_GS_PARENT_DB_URL Value
        working-directory: apps/web
        run: |
          echo "TURSO_GS_PARENT_DB_URL is set to: ${{ needs.create_database.outputs.turso_db_url }}"

      # Find the Existing PR Comment or Create Initial One
      - name: Find PR Comment
        uses: peter-evans/find-comment@v2
        if: github.event_name == 'pull_request'
        id: find-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '[x]:eyAiYXBwIjogIndlYnNpdGUtcHJldmlldyIgfQ=='

      - name: Create or Update Initial PR Comment with Deployment Status
        uses: peter-evans/create-or-update-comment@v2
        if: github.event_name == 'pull_request'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            [x]:eyAiYXBwIjogIndlYnNpdGUtcHJldmlldyIgfQ==
            ### Vercel Preview Deployments - In Progress ðŸš€

            - Docs Deployment: In Progress...
            - Web Deployment (With Database): In Progress...

            _Note: This comment will update automatically with new commits._

      # Turbo Build for Docs and Deploy
      - id: deploy-docs
        name: Deploy to Vercel - Docs
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_DOCS_PROJECT_ID }}
        run: |
          pnpm turbo run build --filter=docs...
          vercel deploy \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_TEAM_ID }} \
            > deploy_url_docs.txt

      - name: Wait for Docs Deployment
        run: |
          vercel inspect \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_TEAM_ID }} \
            --wait \
            --timeout=10m \
            $(cat deploy_url_docs.txt)

      - name: Get Docs Deployment URL
        id: get-url-docs
        run: |
          echo "Docs Deploy URL: $(cat deploy_url_docs.txt)"
          echo "DOCS_DEPLOYMENT_URL=$(cat deploy_url_docs.txt)" >> $GITHUB_OUTPUT

      # Turbo Build for Web and Deploy
      - id: deploy-web
        name: Deploy to Vercel - Web (with Turso DB)
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_WEB_PROJECT_ID }}
        run: |
          pnpm turbo run build --filter=web...
          vercel deploy \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_TEAM_ID }} \
            > deploy_url_web.txt

      - name: Wait for Web Deployment
        run: |
          vercel inspect \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_TEAM_ID }} \
            --wait \
            --timeout=10m \
            $(cat deploy_url_web.txt)

      - name: Get Web Deployment URL
        id: get-url-web
        run: |
          echo "Web Deploy URL: $(cat deploy_url_web.txt)"
          echo "WEB_DEPLOYMENT_URL=$(cat deploy_url_web.txt)" >> $GITHUB_OUTPUT

      # Update the Comment After Deployments Complete
      - name: Update PR Comment with Deployment Status
        uses: peter-evans/create-or-update-comment@v2
        if: github.event_name == 'pull_request'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            [x]:eyAiYXBwIjogIndlYnNpdGUtcHJldmlldyIgfQ==
            ### Vercel Preview Deployments - Completed âœ…

            - [Docs Preview](${{ steps.get-url-docs.outputs.DOCS_DEPLOYMENT_URL }})
            - [Web Preview (With Database)](${{ steps.get-url-web.outputs.WEB_DEPLOYMENT_URL }})

            _Note: This comment will update automatically with new commits._

      # Alias Web Deployment
      - name: Alias Web Deployment
        run: |
          vercel alias \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_TEAM_ID }} \
            ${{ steps.get-url-web.outputs.WEB_DEPLOYMENT_URL }} \
            web-preview-${{ github.event.pull_request.number }}.vercel.app
