name: CI

on:
  push:
    branches:
      - main
      - gh-readonly-queue/main/**
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 3

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared

      - run: pnpm format-check

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared
      # Use --quiet to suppress warnings which show up in PRs
      - run: pnpm lint -- --quiet

  tsc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared

      - run: pnpm tsc
  create_database:
    name: 'Create Database'
    runs-on: ubuntu-latest
    steps:
      - name: Set New Database Name
        id: set-db-name
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref }}"
          CLEAN_BRANCH_NAME=$(echo "${BRANCH_NAME}" | tr -cd '[:alnum:]-')
          NEW_DB_NAME="preview-${CLEAN_BRANCH_NAME}"
          echo "NEW_DB_NAME=${NEW_DB_NAME}" >> $GITHUB_ENV

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Check if Database Exists
        run: |
          RESPONSE=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.TURSO_API_TOKEN }}" \
            "https://api.turso.tech/v1/organizations/snide/databases/${{ env.NEW_DB_NAME }}")

          HTTP_STATUS=$?
          echo "HTTP Status: $HTTP_STATUS"
          echo "API Response: $RESPONSE"

              if [ "$HTTP_STATUS" -eq 0 ]; then
                DATABASE_EXISTS=$(echo $RESPONSE | jq -r '.database.Name')
                if [ "$DATABASE_EXISTS" = "${{ env.NEW_DB_NAME }}" ]; then
                  echo "Database already exists. Skipping creation."
                  echo "DATABASE_EXISTS=true" >> $GITHUB_ENV
                else
                  echo "DATABASE_EXISTS=false" >> $GITHUB_ENV
                fi
              else
                echo "DATABASE_EXISTS=false" >> $GITHUB_ENV
              fi

          - name: Create Database if Not Exists
            if: env.DATABASE_EXISTS != 'true'
            run: |
              GROUP_TO_USE=${GROUP_NAME:-default}

              RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/response.json -X POST \
                -H "Authorization: Bearer ${{ secrets.TURSO_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d '{"name": "'"${{ env.NEW_DB_NAME }}"'", "group": "'"$GROUP_TO_USE"'", "seed": {"type": "database", "name": "ts"} }' \
                "https://api.turso.tech/v1/organizations/snide/databases")

              HTTP_STATUS=$RESPONSE
              RESPONSE_BODY=$(cat /tmp/response.json)

              echo "HTTP Response Code: $HTTP_STATUS"
              echo "API Response: $RESPONSE_BODY"

              if [ "$HTTP_STATUS" -ne 200 ] && [ "$HTTP_STATUS" -ne 201 ]; then
                echo "Failed to create database. HTTP Status: $HTTP_STATUS. Response: $RESPONSE_BODY"
                exit 1
              fi

          - name: Set Hostname Output
            run: |
              if [ "${{ env.DATABASE_EXISTS }}" = "true" ]; then
                # If the database already exists, fetch its details
                RESPONSE=$(curl -s -X GET \
                  -H "Authorization: Bearer ${{ secrets.TURSO_API_TOKEN }}" \
                  "https://api.turso.tech/v1/organizations/snide/databases/${{ env.NEW_DB_NAME }}")

                HOSTNAME=$(echo $RESPONSE | jq -r '.database.Hostname')
              else
                # Extract hostname from the creation response
                HOSTNAME=$(cat /tmp/response.json | jq -r '.database.Hostname')
              fi

              if [ -z "$HOSTNAME" ]; then
                echo "Hostname not found in response"
                exit 1
              fi

              echo "hostname=$HOSTNAME" >> $GITHUB_OUTPUT
  tests:
    needs: [format-check, lint, tsc]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - app: docs
          - app: web
    name: ${{ matrix.app }} tests
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared
      - name: Set Vercel Project ID
        id: set-vercel-id
        run: |
          if [ "${{ matrix.app }}" = "docs" ]; then
            echo "VERCEL_PROJECT_ID=${{ secrets.VERCEL_DOCS_PROJECT_ID }}" >> $GITHUB_ENV
          elif [ "${{ matrix.app }}" = "web" ]; then
            echo "VERCEL_PROJECT_ID=${{ secrets.VERCEL_WEB_PROJECT_ID }}" >> $GITHUB_ENV
          fi

      - name: Get Preview URL
        if: ${{ github.ref != 'refs/heads/main' }}
        uses: dlip/get-vercel-deployment-action@v1.0.2
        id: get-vercel-deployment
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ env.VERCEL_PROJECT_ID }}
          github-branch: ${{ github.head_ref }}
          github-commit: ${{ github.event.pull_request.head.sha }}
      - name: Set BASE_URL
        id: set-base-url
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # Set the BASE_URL to the predefined production URL if on the main branch
            if [ "${{ matrix.app }}" = "docs" ]; then
              echo "BASE_URL=${{ vars.VERCEL_DOCS_PRODUCTION_URL }}" >> $GITHUB_ENV
            elif [ "${{ matrix.app }}" = "web" ]; then
              echo "BASE_URL=${{ vars.VERCEL_WEB_PRODUCTION_URL }}" >> $GITHUB_ENV
            fi
          else
            # Use the dynamically obtained preview URL
            echo "BASE_URL=https://${{ steps.get-vercel-deployment.outputs.deployment-url }}" >> $GITHUB_ENV
          fi

      - name: Display deployment status
        run: 'echo "The deployment URL is https://${{ steps.get-vercel-deployment.outputs.deployment-url }}"'
      - name: Install Playwright Browsers
        if: ${{ github.ref != 'refs/heads/main' }}
        run: pnpx playwright install --with-deps
      - name: Run Playwright Tests
        if: ${{ github.ref != 'refs/heads/main' }}
        working-directory: apps/${{ matrix.app }}
        env:
          BASE_URL: '${{ env.BASE_URL }}'
          VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}
        run: |
          echo "BASE_URL is ${{ env.BASE_URL }}"
          pnpm run test
