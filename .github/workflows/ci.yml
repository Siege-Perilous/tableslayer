name: Deploy Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        default: 'main'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared
      - run: pnpm format-check

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared
      - run: pnpm lint -- --quiet

  tsc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/shared
      - run: pnpm tsc

  create_database:
    name: 'Create Database'
    runs-on: ubuntu-latest
    needs: [format-check, lint, tsc] # Create database after all checks succeed, but checks run in parallel
    outputs:
      turso_db_url: ${{ steps.set-db-url.outputs.turso_db_url }} # Capture the output
    steps:
      - name: Set New Database Name
        id: set-db-name
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref }}"
          CLEAN_BRANCH_NAME=$(echo "${BRANCH_NAME}" | tr -cd '[:alnum:]-')
          NEW_DB_NAME="preview-${CLEAN_BRANCH_NAME}"
          echo "NEW_DB_NAME=${NEW_DB_NAME}" >> $GITHUB_ENV

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Check/Create Database and Set TURSO_GS_PARENT_DB_URL
        id: set-db-url
        run: |
          # Fetch the existing database information
          RESPONSE=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.TURSO_API_TOKEN }}" \
            "https://api.turso.tech/v1/organizations/snide/databases/${{ env.NEW_DB_NAME }}")

          HTTP_STATUS=$?
          if [ "$HTTP_STATUS" -eq 0 ]; then
            DATABASE_EXISTS=$(echo $RESPONSE | jq -r '.database.Name')
            if [ "$DATABASE_EXISTS" = "${{ env.NEW_DB_NAME }}" ]; then
              HOSTNAME=$(echo $RESPONSE | jq -r '.database.Hostname')
              echo "Database already exists. Skipping creation."
              echo "DATABASE_EXISTS=true" >> $GITHUB_ENV
            else
              echo "DATABASE_EXISTS=false" >> $GITHUB_ENV
            fi
          else
            echo "DATABASE_EXISTS=false" >> $GITHUB_ENV
          fi

          # Create the database if it doesn't exist
          if [ "${DATABASE_EXISTS}" != "true" ]; then
            RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/response.json -X POST \
              -H "Authorization: Bearer ${{ secrets.TURSO_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"name": "'"${{ env.NEW_DB_NAME }}"'", "group": "default", "seed": {"type": "database", "name": "ts"} }' \
              "https://api.turso.tech/v1/organizations/snide/databases")

            HTTP_STATUS=$RESPONSE
            RESPONSE_BODY=$(cat /tmp/response.json)

            if [ "$HTTP_STATUS" -eq 409 ]; then
              # Handle the case where the database already exists
              echo "Database already exists. Skipping creation."
              HOSTNAME=$(cat /tmp/response.json | jq -r '.database.Hostname')
            elif [ "$HTTP_STATUS" -ne 200 ] && [ "$HTTP_STATUS" -ne 201 ]; then
              # Fail if there is an unexpected error
              echo "Failed to create database. HTTP Status: $HTTP_STATUS. Response: $RESPONSE_BODY"
              exit 1
            else
              # Extract the hostname from the creation response
              HOSTNAME=$(cat /tmp/response.json | jq -r '.database.Hostname')
            fi
          fi

          # Check if hostname is empty or not set properly
          if [ -z "$HOSTNAME" ]; then
            echo "Hostname not found in response"
            exit 1
          fi

          # Set the environment variable for the hostname
          echo "TURSO_GS_PARENT_DB_URL=$HOSTNAME" >> $GITHUB_ENV
          echo "::set-output name=turso_db_url::$HOSTNAME" # Set the output for downstream jobs

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [create_database]
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      TURSO_GS_PARENT_DB_URL: ${{ needs.create_database.outputs.turso_db_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - run: npm i -g vercel@latest

      # Find the Existing PR Comment or Create Initial One
      - name: Find PR Comment
        uses: peter-evans/find-comment@v2
        if: github.event_name == 'pull_request'
        id: find-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '[x]:eyAiYXBwIjogIndlYnNpdGUtcHJldmlldyIgfQ=='

      - name: Create or Update Initial PR Comment with Deployment Status
        uses: peter-evans/create-or-update-comment@v2
        if: github.event_name == 'pull_request'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            [x]:eyAiYXBwIjogIndlYnNpdGUtcHJldmlldyIgfQ==
            ### Vercel Preview Deployments - In Progress ðŸš€

            - Docs Deployment: In Progress...
            - Web Deployment (With Database): In Progress...

            _Note: This comment will update automatically with new commits._

      - id: deploy-docs
        name: Deploy to Vercel - Docs
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_DOCS_PROJECT_ID }}
        run: |
          vercel deploy \
            --token ${{ env.VERCEL_TOKEN }} \
            --no-wait \
            > deploy_url_docs.txt

      - name: Get Docs Deployment URL
        id: get-url-docs
        run: |
          echo "Docs Deploy URL: $(cat deploy_url_docs.txt)"
          echo "DOCS_DEPLOYMENT_URL=$(cat deploy_url_docs.txt)" >> $GITHUB_OUTPUT

      - id: deploy-web
        name: Deploy to Vercel - Web (with Turso DB)
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_WEB_PROJECT_ID }}
          TURSO_GS_PARENT_DB_URL: ${{ env.TURSO_GS_PARENT_DB_URL }}
        run: |
          vercel deploy \
            --token ${{ env.VERCEL_TOKEN }} \
            --no-wait \
            > deploy_url_web.txt

      - name: Get Web Deployment URL
        id: get-url-web
        run: |
          echo "Web Deploy URL: $(cat deploy_url_web.txt)"
          echo "WEB_DEPLOYMENT_URL=$(cat deploy_url_web.txt)" >> $GITHUB_OUTPUT

      # Update the Comment After Deployments Complete
      - name: Update PR Comment with Deployment Status
        uses: peter-evans/create-or-update-comment@v2
        if: github.event_name == 'pull_request'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            [x]:eyAiYXBwIjogIndlYnNpdGUtcHJldmlldyIgfQ==
            ### Vercel Preview Deployments - Completed âœ…

            - [Docs Preview](${{ steps.get-url-docs.outputs.DOCS_DEPLOYMENT_URL }})
            - [Web Preview (With Database)](${{ steps.get-url-web.outputs.WEB_DEPLOYMENT_URL }})

            _Note: This comment will update automatically with new commits._
